import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.openapitools:openapi-generator-gradle-plugin:7.4.0"
    }
}


plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.openapi.generator' version '7.9.0'
}

apply plugin: "org.openapi.generator"

group = 'com.challenge'
version = '0.0.1-SNAPSHOT'
description = 'Movement Management'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

ext {
}

dependencies {
    compileOnly "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok"
    compileOnly group: "org.projectlombok", name: "lombok", version: ""

    implementation group: "org.mapstruct", name: "mapstruct", version: "1.5.3.Final"
    annotationProcessor group: "org.mapstruct", name: "mapstruct-processor", version: "1.5.3.Final"

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '3.1.3'

    implementation group: "org.springframework.boot", name: "spring-boot-starter-data-r2dbc", version: "2.7.10"
    implementation 'io.r2dbc:r2dbc-mssql'

    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-webflux-ui', version: '1.7.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

task buildSpringServer(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "spring"
    templateDir = "$rootDir/src/main/resources/openapi-templates"
    inputSpec = "$rootDir/src/main/resources/openapi.yaml".toString()
    outputDir = "$buildDir/generated".toString()
    apiPackage = "com.challenge.services.server"
    modelPackage = "com.challenge.services.server.models"
    library = "spring-boot"
    configOptions = [
            skipDefaultInterface                    : "true",
            useSpringBoot3                          : "true",
            useJakartaEe                            : "true",
            serializableModel                       : "true",
            dateLibrary                             : "java8",
            openApiNullable                         : "false",
            reactive                                : "true",
            apiFirst                                : "false",
            delegatePattern                         : "false",
            configPackage                           : "com.challenge.services.config",
            sourceFolder                            : "src/main/java",
            basePackage                             : "com.challenge",
            disallowAdditionalPropertiesIfNotPresent: "true",
            interfaceOnly                           : "true"
    ]
}


tasks.register('buildSpringClient0', GenerateTask) {
    inputSpec = "$rootDir/src/main/resources/openapi-client-0.yaml".toString()
    generatorName = "java"
    templateDir = "$rootDir/src/main/resources/openapi-templates/client"
    apiPackage = "${packageName}.clients0.client"
    modelPackage = "${packageName}.clients0.client.models"
    outputDir = "$buildDir/generated".toString()

    library = "webclient"
    configOptions = [
            useSpringBoot3 : "true",
            useJakartaEe   : "true",
            openApiNullable: "false",
            sourceFolder   : "src/main/java",
            configPackage  : "${packageName}.clients0.config"
    ]

}
compileJava.dependsOn buildSpringServer, buildSpringClient0

compileJava {
    options.compilerArgs += [
            "-Amapstruct.suppressGeneratorTimestamp=true",
            "-Amapstruct.suppressGeneratorVersionInfoComment=true",
            "-Amapstruct.verbose=true",
            "-Amapstruct.defaultComponentModel=spring"
    ]
}

sourceSets.main.java.srcDirs = ["$buildDir/generated/src/main/java", "src/main/java"]

tasks.named('test') {
    useJUnitPlatform()
}
